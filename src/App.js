import React, { useState } from "react";
import CodeMirror from "@uiw/react-codemirror";
import { markdown } from "@codemirror/lang-markdown";
import { EditorView } from "@codemirror/view";
import { marked } from "marked";
import { BrowserRouter as Router, Route, Routes, useNavigate } from "react-router-dom";  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö React Router
import "./styles.css";
import DocumentPage from "./DocumentPage";  // ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ

export default function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<DocumentEditor />} />
        <Route path="/document" element={<DocumentPage />} /> {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DocumentPage */}
      </Routes>
    </Router>
  );
}

function DocumentEditor() {
  const [content, setContent] = useState("");
  const [isPreview, setIsPreview] = useState(false);

  const [formData, setFormData] = useState({
    project_title_th: "",
    project_title_en: "",
    author_th_1: "",
    author_th_2: "",
    academic_year: "",
  });

  const handleInputChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const downloadWordFile = async () => {
    if (!formData.project_title_th || !formData.project_title_en || !formData.author_th_1 || !formData.academic_year) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á");
      return;
    }

    try {
      const response = await fetch("http://127.0.0.1:8000/api/generate-docx/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

    

      if (!response.ok) throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå");

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "project_cover.docx";
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Error:", error);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
    }
  };

  // ‡πÉ‡∏ä‡πâ useNavigate() ‡∏à‡∏≤‡∏Å React Router
  const navigate = useNavigate();

  const goToDocument = () => {
    navigate("/document");  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà /document
  };

  return (
    <div className="container">
      <button
        className="btn btn-primary mb-4"
        onClick={() => setIsPreview(!isPreview)}
      >
        {isPreview ? "üîÑ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Editor" : "üëÅÔ∏è ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"}
      </button>
      <button className="btn btn-success mb-4" onClick={downloadWordFile}>
        üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô Word
      </button>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà */}
      <button className="btn btn-success mb-4" onClick={goToDocument}>
        ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏ó‡∏Å.01
      </button>

      <div className="form-container">
        <input type="text" name="project_title_th" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡πÑ‡∏ó‡∏¢)" onChange={handleInputChange} />
        <input type="text" name="project_title_en" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)" onChange={handleInputChange} />
        <input type="text" name="author_th_1" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥ (‡πÑ‡∏ó‡∏¢)‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà1" onChange={handleInputChange} />
        <input type="text" name="author_th_2" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥ (‡πÑ‡∏ó‡∏¢)‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà2" onChange={handleInputChange} />
        <input type="text" name="academic_year" placeholder="‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤" onChange={handleInputChange} />
      </div>

      {/* {!isPreview && (
        <div className="editor-box">
          <h2>‚úçÔ∏è ‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</h2>
          <CodeMirror
            value={content}
            extensions={[markdown(), EditorView.lineWrapping]}
            onChange={(value) => setContent(value)}
          />
        </div>
      )}

      {isPreview && (
        <div className="preview-box">
          <h2>üìÑ ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h2>
          <div
            className="content-box"
            dangerouslySetInnerHTML={{ __html: marked(content) }}
          />
        </div>
      )} */}
    </div>
  );
}
